#!/usr/bin/env groovy

pipeline {

	agent any

//	tools {
//		jdk '8u66'
//	}

	triggers { pollSCM('H/5 * * * *') } // every 5 minutes

	options {
		disableConcurrentBuilds(abortPrevious: true)
		skipStagesAfterUnstable()
	}

	environment {
		DEPLOY_ENV = "TEST"
		PROJECT = "${readProperties(file: "${WORKSPACE}/settings.gradle").'rootProject.name'}".replaceAll("\"", "")
		PROJECT_VERSION = "${readProperties(file: "${WORKSPACE}/gradle.properties").version}"
		JOB_NAME = JOB_NAME.replaceAll("%2F", "/")
	}

	stages {

		stage('CommitDetails') {
			steps {
				script {
					env.GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
					env.GIT_AUTHOR = sh (script: 'git log -1 --pretty=%cn ${GIT_COMMIT}', returnStdout: true).trim()
				}
			}
		}

		stage('Build') {
			steps {
				echo ">>> Build version: ${env.PROJECT_VERSION}  ${env.JOB_BASE_NAME}"
				script {
					try {
						sh 'chmod +x gradlew'
						sh './gradlew build'
					} finally {
						junit '**/build/test-results/test/*.xml'
						archiveArtifacts artifacts: '**/build/test-results/test/*.xml', allowEmptyArchive: true
					}
				}
			}
		}

		stage('Publish artifacts') {
			when { anyOf { branch 'master'; branch 'develop' } }
			steps {
				echo '>>> Publish artifacts'
//				script {
//					sh 'chmod +x gradlew'
//					sh './gradlew publish'
//				}
			}
		}

		stage('Feature deployment') {
			when {
				beforeInput true
				branch 'feature/*'
			}

			steps {
				timeout(time: 10, unit: 'MINUTES') {
					script {
						def userInput = input message: 'Approve deployment?',
								parameters: [
										choice(name: 'Deployment', choices: 'Yes\nNo', description: '')
								]

						echo ">>> Feature branch deployment started. userInput: ${userInput.Deployment}"

						if (userInput.Deployment == 'Yes') {
							TASK = "deployColectaDev"
							echo ">>> Deploying to TEST using task: ${TASK}"
//							sh "./gradlew ${TASK}"
						}

						echo '>>> Deployment finished'
					}
				}
			}
		}

		stage('Test deployment') {
			when {
				beforeInput true
				branch 'develop'
			}

			input {
				message 'Approve deployment?'
				parameters {
					choice(name: 'Deployment', choices: 'Yes\nNo', description: '')
				}
			}

			steps {
				script {

					echo ">>> Develop branch deployment started"

					if (Deployment == 'Yes') {
						TASK = "deployColectaDev"
						echo ">>> Deploying to TEST using task: ${TASK}"
//						sh "./gradlew ${TASK}"
					}

					echo '>>> Deployment finished'
				}
			}
		}

		stage('Release Approval') {
			when {
				beforeInput true
				branch 'develop'
			}
			input {
				message 'Do you want to do a GitFlow release?'
				parameters {
					choice(name: 'Release', choices: 'Yes\nNo', description: '')
				}
			}

			steps {
				script {
					if (Release == 'Yes') {
						echo '>>> Starting release'
//						sh './gradlew releaseStart'
//						sh './gradlew releaseFinish'
						echo '>>> Release completed'
					} else {
						echo '>>> Release not required'
					}
				}

			}
		}

		stage('Prod deployment') {
			when {
				beforeInput true
				branch 'master'
			}

			input {
				message 'Approve deployment?'
				parameters {
					choice(name: 'Deployment', choices: 'Yes\nNo', description: '')
				}
			}

			steps {
				script {

					DEPLOY_ENV = "PROD"
					echo ">>> Master branch deployment started"

					if (Deployment == 'Yes') {
						TASK = "deployColectaDev"
						echo ">>> Deploying to PROD using task: ${TASK}"
//						sh "./gradlew ${TASK}"
					}

					echo '>>> Deployment finished'
				}
			}
		}

	}

	post {
		success {
			echo '>>> Sending success msg to Slack channel'
//			slackSend(
//					channel: "#unibos-build",
//					token: "Migrated slack token",
//					color: "good",
//					message: """
//Project: ${env.PROJECT}
//Environment: ${env.DEPLOY_ENV}
//Job: ${env.JOB_NAME}
//Version: ${env.PROJECT_VERSION}
//Comitted by: ${env.GIT_AUTHOR}
//Last commit message: ${env.GIT_COMMIT_MSG}
//Status: Success
//"""
//			)
		}
		failure {
			echo '>>> Sending failure msg to Slack channel'
//			slackSend(
//					channel: "#unibos-build",
//					token: "Migrated slack token",
//					color: "danger",
//					message: """
//Project: ${env.PROJECT}
//Environment: ${env.DEPLOY_ENV}
//Job: ${env.JOB_NAME}
//Version: ${env.PROJECT_VERSION}
//Comitted by: ${env.GIT_AUTHOR}
//Last commit message: ${env.GIT_COMMIT_MSG}
//Status: Failure
//"""
//			)
		}
	}
}